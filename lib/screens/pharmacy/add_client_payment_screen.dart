import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:jawda/models/client.dart';
import 'package:jawda/models/client_payment.dart';
import 'package:jawda/providers/client_provider.dart';
import 'package:dropdown_search/dropdown_search.dart';
import 'package:provider/provider.dart';

class AddClientPaymentScreen extends StatefulWidget {

   final Client client;
  const AddClientPaymentScreen({super.key,required this.client});

  @override
  _AddClientPaymentScreenState createState() => _AddClientPaymentScreenState();
}

class _AddClientPaymentScreenState extends State<AddClientPaymentScreen> {
  final _formKey = GlobalKey<FormState>();
  final _amountController = TextEditingController();
  DateTime _paymentDate = DateTime.now();
  Client? _selectedClient;
  bool _isLoading = false;
  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    _selectedClient = widget.client;
  }
  @override
  void dispose() {
    _amountController.dispose();
    super.dispose();
  }

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: _paymentDate,
      firstDate: DateTime(2000),
      lastDate: DateTime(2050),
    );
    if (pickedDate != null && pickedDate != _paymentDate) {
      setState(() {
        _paymentDate = pickedDate;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final colorScheme = Theme.of(context).colorScheme;

    return Scaffold(
      appBar: AppBar(
        title: Text('Add Client Payment'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              DropdownSearch<Client>(
                popupProps: PopupProps.menu(
                  showSearchBox: true,
                ),
                compareFn: (item1, item2) => item1.id == item2.id,
                itemAsString: (Client u) => u.name,
                decoratorProps: DropDownDecoratorProps(
                  decoration: InputDecoration(
                    labelText: "Select Client",
                    hintText: "Select client in menu",
                    prefixIcon: Icon(Icons.person),
                    border: OutlineInputBorder(),
                  ),
                ),
                selectedItem: widget.client,
                items: (filter, loadProps) {
                  return context.read<ClientProvider>().getClients(filter);
                },  // Replace with your actual list of clients
                onChanged: (Client? data) {
                  setState(() {
                    _selectedClient = data;
                  });
                },
              ),
              SizedBox(height: 16),
              Row(
                children: [
                  Text('Payment Date: '),
                  SizedBox(width: 10),
                  ElevatedButton(
                    onPressed: () => _selectDate(context),
                    child: Text(DateFormat('yyyy-MM-dd').format(_paymentDate)),
                  ),
                ],
              ),
              SizedBox(height: 16),
              TextFormField(
                controller: _amountController,
                decoration: InputDecoration(
                  labelText: 'Amount',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.attach_money),
                ),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter the amount';
                  }
                  if (double.tryParse(value) == null) {
                    return 'Please enter a valid number';
                  }
                  return null;
                },
              ),
              SizedBox(height: 32),
              ElevatedButton(
                onPressed: _isLoading ? null : () async {
                  if (_formKey.currentState!.validate() && _selectedClient != null) {
                    setState(() {
                      _isLoading = true;
                    });

                    final newPayment = ClientPayment(
                      id: 0, // Auto-generated by the database
                      amount: double.parse(_amountController.text),
                      clientId: _selectedClient!.id,
                      paymentDate: _paymentDate,
                      createdAt: DateTime.now(),
                      updatedAt: DateTime.now(),
                    );

                    try {
                      await Provider.of<ClientProvider>(context, listen: false).addPayment(newPayment,context);
                      Navigator.pop(context); // Go back to the previous screen

                    } catch (error) {
                      print('Error adding payment: $error');
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text('Failed to add payment: ${error.toString()}')),
                      );
                    } finally {
                      setState(() {
                        _isLoading = false;
                      });
                    }
                  }
                },
                child: _isLoading ? CircularProgressIndicator() : Text('Add Payment'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: colorScheme.primary,
                  foregroundColor: colorScheme.onPrimary,
                  padding: EdgeInsets.symmetric(vertical: 16),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}